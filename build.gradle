buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

// Gradle plugins
plugins {
    id "maven"
    id "signing"
    id "com.matthewprenger.cursegradle" version "1.0.9"
}

apply plugin: 'net.minecraftforge.gradle.forge'

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

// Gradle default tasks
defaultTasks 'build', 'install'

// Basic project information
group = 'net.malisis'
archivesBaseName = 'ego'
version = '1.12.2-1.0.0-SNAPSHOT'
ext.packaging = 'jar'

// Extended project information
ext.projectName = 'EGO'
ext.description = 'External GuiDemo Overall'
ext.url = 'http://github.com/Ordinastie/EGO'


// Compilation variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// MinecraftForge version
minecraft {
    version = "1.12.2-14.23.5.2768"
    mappings = "snapshot_20180814"

    if (file("../../run").exists()) {
        runDir = "../../run/assets"
    } else {
        runDir = "run/assets"
    }


    replace '${version}', project.version
    replaceIn "EGO.java"
}


// Filter, process, and include resources
processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // Include in final JAR
    from 'LICENSE.txt'

    // Replace variables
    from('src/main/resources/mcmod.info') {
        expand 'modid': archivesBaseName,
                'name': projectName,
                'description': project.ext.description,
                'version': version,
                'buildNumber': buildNumber,
                'mcversion': minecraft.version,
                'url': url
    }
}

jar {
    classifier 'base'
    manifest {
        attributes "Built-By": "Ordinastie",
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Title": name,
                "Implementation-Version": version,
                "Implementation-Vendor": url,
                "FMLAT": "ego_at.cfg"
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// Javadoc JAR generation
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

// Source JAR generation
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

// Create a JAR based on deobfuscated code
task deobfJar(type: Jar) {
    manifest.from jar.manifest
    from sourceSets.main.output
    classifier = 'dev'
}


// Set all artifacts
artifacts {
    archives deobfJar, sourcesJar, javadocJar
}

// Deployment signing
signing {
    // Check if uploadArchives task is used
    required {gradle.taskGraph.hasTask("uploadArchives")}

    // Sign JAR artifacts
    sign configurations.archives
}

// Artifact deployment
uploadArchives {
    repositories.mavenDeployer {

        // Sign Maven POM
        beforeDeployment {MavenDeployment deployment -> signing.signPom(deployment)}

        def username = project.hasProperty('sonatypeUsername') ? project.getProperty('sonatypeUsername') :
                System.getenv("sonatypeUsername");
        def password = project.hasProperty('sonatypePassword') ? project.getProperty('sonatypePassword') :
                System.getenv("sonatypePassword");

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
            authentication(userName: username, password: password)
        }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
            authentication(userName: username, password: password)
        }

        // Maven POM generation
        pom.project {
            name projectName
            artifactId archivesBaseName
            packaging packaging
            url url
            description project.ext.description

            scm {
                connection 'scm:git:git://github.com/Ordinastie/EGO.git'
                developerConnection 'scm:git:ssh://git@github.com:Ordinastie/EGO.git'
                url 'https://github.com/Ordinastie/EGO'
            }

            licenses {
                license {
                    name 'The MIT License'
                    url 'http://www.tldrlegal.com/license/mit-license'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'Ordinastie'
                    name 'Ordinastie'
                }
            }

            issueManagement {
                system 'github'
                url 'https://github.com/Ordinastie/EGO/issues'
            }
        }
    }
}

if (project.hasProperty('curseapi')) {
    curseforge {
        apiKey = curseapi
        project {
            id = '*'
            releaseType = 'release'

            addArtifact deobfJar
            addArtifact sourcesJar
            addArtifact javadocJar
        }
    }
}